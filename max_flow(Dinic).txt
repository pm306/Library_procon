const int MAX_V = 110;
//to:=行先, cap:=容量, rev:=逆辺のインデックス
struct edge { int to, cap, rev; };

vector<edge> G[MAX_V];
vector<int> dist, iter; //dist:=sからの距離、iter:=どこまで調べ終わったか(?)

void add_edge(int from, int to, int cap){
    G[from].emplace_back((edge){to, cap, (int)G[to].size()});
    G[to].emplace_back((edge){from, 0, (int)G[from].size() - 1}); //残余グラフ
}

//sからの最短距離をbfsで計算する
void bfs(int s){
    dist.assign(MAX_V, -1);
    queue<int> que; que.push(s);
    dist[s] = 0;
    while(que.size()){
        int v = que.front(); que.pop();
        for(auto &e : G[v]){
            if(e.cap > 0 and dist[e.to] == -1){
                dist[e.to] = dist[v] + 1;
                que.push(e.to);
            }
        }
    }
}

//dfsで増加パスを探す
//v:=現在ノード t:=目的ノード f:=流量
int dfs(int v, int t, int f){
    if(v == t) return f;
    for(int &i = iter[v]; i < G[v].size(); i++){
        edge &e = G[v][i];
        if(e.cap > 0 and dist[v] < dist[e.to]){
            int d = dfs(e.to, t, min(f, e.cap)); //現在フローと流量の小さい方を採用
            if(d > 0){ //sからtへのパスが存在する
                e.cap -= d; //通過分減らす
                G[e.to][e.rev].cap += d; //残余を増やす
                return d;
            }
        }
    }
    return 0;
}

//最大流を求める
int max_flow(int s, int t){
    int flow = 0;
    while(true){
        bfs(s);
        if(dist[t] == -1) return flow;
        iter.assign(MAX_V, 0);
        int f;
        while((f = dfs(s, t, INF)) > 0){
            flow += f;
        }
    }
}