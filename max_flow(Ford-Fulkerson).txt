const int MAX_V = 110;

//行先、容量、逆辺(のインデックス)
struct edge { int to, cap, rev; };

vector<edge> G[MAX_V];
vector<bool> seen; //dfsで調べたかのフラグ


void add_edge(int from, int to, int cap){
    G[from].emplace_back((edge){to, cap, (int)G[to].size()});
    G[to].emplace_back((edge){from, 0, (int)G[from].size() - 1}); //残余グラフ
}

//dfsで増加パスを探す
//v:=現在ノード、t:=目的ノード
int dfs(int v, int t, int f){
    if(v == t) return f;
    seen[v] = true;
    for(auto& e : G[v]){
        if(!seen[e.to] and e.cap > 0){
            int d = dfs(e.to, t, min(f, e.cap)); //現在フローと流量の小さい方を採用
            if(d > 0){ //sからtへのパスが存在する
                e.cap -= d; //通過分減らす
                G[e.to][e.rev].cap += d; //残余を増やす
                return d;
            }
        }
    }
    return 0;
}

//最大流を求める
int max_flow(int s, int t){
    int flow = 0;
    while(true){
        seen.assign(MAX_V, false);
        int f = dfs(s, t, INF);
        if(f == 0)return flow;
        flow += f;
    }
}