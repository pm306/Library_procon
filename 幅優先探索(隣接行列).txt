//幅優先探索(隣接行列)
//戻り値：始点から各頂点までの最小コスト
vector<vector<ll>> bfs(vector<string>& grid, int sh, int sw){
    const int dx[4]={0,1,0,-1};
    const int dy[4]={-1,0,1,0};
    int H = grid.size();
    int W = grid[0].size();

    vector dist(H, vector<ll>(W, LLINF)); dist[sh][sw] = 0;
    queue<pii> que; que.emplace(sh, sw);

    while(que.size()){
        auto [y, x] = que.front(); que.pop();
        for(int i=0; i<4; i++){
            int ny = y+dy[i], nx = x+dx[i];
            
            if(ny<0 or nx<0 or ny>=H or nx>=W)continue;
            if(grid[ny][nx] == '#')continue;

            if(dist[ny][nx] == LLINF){
                dist[ny][nx] = dist[y][x] + 1;
                que.emplace(ny, nx);
            }
        }
    }

    return dist;
}